{"version":3,"file":"static/js/83.a4b58abd.chunk.js","mappings":"gTAUaA,EAAa,WACxB,IAAQC,GAAUC,EAAAA,EAAAA,MAAVD,MACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAWC,EAAAA,EAAAA,MACXC,GAAQJ,EAAAA,EAAAA,IAAYK,EAAAA,IAe1B,OAdAC,EAAAA,EAAAA,YAAU,WACHX,IAGL,iBAAC,uGAESE,GAASU,EAAAA,EAAAA,IAAWZ,IAAQa,SAFrC,QAGGC,EAAAA,EAAAA,IAAc,wBACdP,EAAS,UAJZ,iDAMGQ,EAAAA,EAAAA,IAAY,GAAD,cANd,wDAAD,EASD,GAAE,CAACb,EAAUK,EAAUP,IACpBS,GACK,yCAGP,8BACIL,GAGA,SAAC,IAAD,CACEY,GAAG,OACHC,QAAQ,OACRC,cAAc,SACdC,WAAW,SACXC,eAAe,SACfC,OAAO,QANT,UAQE,SAAC,IAAD,OAVF,2CAeP,C","sources":["pages/VerifyPage.jsx"],"sourcesContent":["import { Box } from 'components/Box';\nimport { notifyError, notifySuccess } from 'helpers/notify';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { verifyUser } from 'redux/authApi';\nimport { getAuthIsLoading, getError } from 'redux/selectors';\nimport { SpinnerLoader } from '../components/SpinnerLoader/SpinnerLoader';\nimport { useNavigate } from 'react-router-dom';\n\nexport const VerifyPage = () => {\n  const { token } = useParams();\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getAuthIsLoading);\n  const navigate = useNavigate();\n  const error = useSelector(getError);\n  useEffect(() => {\n    if (!token) {\n      return;\n    }\n    (async () => {\n      try {\n        await dispatch(verifyUser(token)).unwrap();\n        notifySuccess(`verification success`);\n        navigate('/login');\n      } catch (error) {\n        notifyError(`${error}`);\n      }\n    })();\n  }, [dispatch, navigate, token]);\n  if (error) {\n    return <>error</>;\n  }\n  return (\n    <>\n      {!isLoading ? (\n        <>success</>\n      ) : (\n        <Box\n          as=\"main\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          height=\"100vh\"\n        >\n          <SpinnerLoader />\n        </Box>\n      )}\n    </>\n  );\n};\n"],"names":["VerifyPage","token","useParams","dispatch","useDispatch","isLoading","useSelector","getAuthIsLoading","navigate","useNavigate","error","getError","useEffect","verifyUser","unwrap","notifySuccess","notifyError","as","display","flexDirection","alignItems","justifyContent","height"],"sourceRoot":""}