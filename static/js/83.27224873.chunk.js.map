{"version":3,"file":"static/js/83.27224873.chunk.js","mappings":"mRAUaA,EAAa,WACxB,IAAQC,GAAUC,EAAAA,EAAAA,MAAVD,MACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAWC,EAAAA,EAAAA,MAmBjB,OAhBAC,EAAAA,EAAAA,YAAU,WAER,GAAKT,EASL,OAJAE,GAASQ,EAAAA,EAAAA,IAAWV,IACjBW,SACAC,MAAK,kBAAIL,EAAS,SAAb,IACLM,OAAM,SAAAC,GAAK,OAAIC,EAAAA,EAAAA,IAAY,GAAD,OAAID,GAAnB,IACP,WAEN,CACF,GAAE,CAACZ,EAAUK,EAAUP,KAGtB,8BACII,GAGA,SAAC,IAAD,CACEY,GAAG,OACHC,QAAQ,OACRC,cAAc,SACdC,WAAW,SACXC,eAAe,SACfC,OAAO,QANT,UAQE,SAAC,IAAD,OAVF,2CAeP,C","sources":["pages/VerifyPage.jsx"],"sourcesContent":["import { Box } from 'components/Box';\nimport { notifyError } from 'helpers/notify';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { verifyUser } from 'redux/authApi';\nimport { getAuthIsLoading } from 'redux/selectors';\nimport { SpinnerLoader } from '../components/SpinnerLoader/SpinnerLoader';\nimport { useNavigate } from 'react-router-dom';\n\nexport const VerifyPage = () => {\n  const { token } = useParams();\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getAuthIsLoading);\n  const navigate = useNavigate();\n\n\n  useEffect(() => {\n\n    if (!token) {\n      return;\n    }\n    // const controller = new AbortController();\n    // const { signal } = controller;\n    dispatch(verifyUser(token))\n      .unwrap()\n      .then(()=>navigate('/login'))\n      .catch(error => notifyError(`${error}`));\n    return () => {\n      // controller.abort();\n    };\n  }, [dispatch, navigate, token]);\n\n  return (\n    <>\n      {!isLoading ? (\n        <>success</>\n      ) : (\n        <Box\n          as=\"main\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          height=\"100vh\"\n        >\n          <SpinnerLoader />\n        </Box>\n       )} \n    </>\n  );\n};\n"],"names":["VerifyPage","token","useParams","dispatch","useDispatch","isLoading","useSelector","getAuthIsLoading","navigate","useNavigate","useEffect","verifyUser","unwrap","then","catch","error","notifyError","as","display","flexDirection","alignItems","justifyContent","height"],"sourceRoot":""}