{"version":3,"file":"static/js/550.4df1006f.chunk.js","mappings":"8XA2BA,GAzBYA,E,QAAAA,K,SCINC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,SAAUF,EAAAA,GAAW,uBAClBG,IAAI,EAAG,qDACPC,SAAS,0BAGDC,EAAe,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACvBC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CAAEP,SAAU,IAC3BQ,iBAAkBX,EAClBY,SAAU,SAAAC,GACRN,EAAYM,EACb,IAGH,OACE,+BACE,UAAC,EAAD,CAAKC,GAAG,OAAOF,SAAUJ,EAAOO,aAAcC,MAAM,OAApD,WACE,SAACC,EAAA,EAAD,CACEC,OAAO,SACPC,WAAS,EACTd,UAAQ,EACRe,GAAG,WACHC,KAAK,WACLC,MAAM,WACNC,KAAK,WACLC,MAAOhB,EAAOK,OAAOV,SACrBsB,SAAUjB,EAAOkB,aACjBC,MAAOnB,EAAOoB,QAAQzB,UAAY0B,QAAQrB,EAAOsB,OAAO3B,UACxD4B,WAAYvB,EAAOoB,QAAQzB,UAAYK,EAAOsB,OAAO3B,YAEvD,SAAC6B,EAAA,EAAD,CACET,KAAK,SACLJ,WAAS,EACTc,QAAQ,YACRC,GAAI,CAAEC,GAAI,EAAGC,GAAI,GAJnB,sBAWP,EC/BYC,EAAsB,WACjC,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAC9B,GAAgCC,EAAAA,EAAAA,UAAS,MAAzC,eAAOxC,EAAP,KAAiBI,EAAjB,KACQqC,GAAUC,EAAAA,EAAAA,MAAVD,MACFE,GAAWC,EAAAA,EAAAA,MAiBjB,OAfAC,EAAAA,EAAAA,YAAU,WACR,GAAKJ,EAWL,OARIzC,GACF2C,GAASG,EAAAA,EAAAA,IAAoB,CAAE9C,SAAAA,EAAUyC,MAAAA,KACtCM,SACAC,MAAK,kBAAMb,EAAS,SAAf,IACLc,OAAM,SAAAzB,IACL0B,EAAAA,EAAAA,IAAY,GAAD,OAAI1B,GAChB,IAEE,WAAQ,CAChB,GAAE,CAACmB,EAAUR,EAAUnC,EAAUyC,KAGhC,8BACIJ,GAuBA,+BACE,SAAC,IAAD,CACE1B,GAAG,OACHwC,QAAQ,OACRC,cAAc,SACdC,WAAW,SACXC,eAAe,SACfC,OAAO,QANT,UAQE,SAACC,EAAA,EAAD,SA/BJ,+BACE,UAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,WACE,SAACC,EAAA,GAAD,KACA,UAACC,EAAA,EAAD,CACE7B,GAAI,CACF8B,UAAW,EACXV,QAAS,OACTC,cAAe,SACfC,WAAY,UALhB,WAQE,SAACS,EAAA,EAAD,CAAQ/B,GAAI,CAAEgC,EAAG,EAAGC,QAAS,kBAA7B,UACE,SAACC,EAAA,EAAD,OAEF,SAACC,EAAA,EAAD,CAAYC,UAAU,KAAKrC,QAAQ,KAAnC,sBAGA,SAAC3B,EAAD,CAAcC,YAAaA,aAoBxC,C,0BC7EGgE,EAAyBC,EAAQ,MAKrCC,EAAQ,OAAU,EAElB,IAAIC,EAAiBH,EAAuBC,EAAQ,OAEhDG,EAAcH,EAAQ,KAEtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,gOACD,gBAEJN,EAAQ,EAAUG,C","sources":["../node_modules/@mui/system/esm/Box/Box.js","components/AuthForns/PasswordForm.jsx","pages/RestorePasswordPage.jsx","../node_modules/@mui/icons-material/LockOutlined.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport createBox from '../createBox';\nconst Box = createBox();\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","import { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport { Box } from '@mui/system';\n\nconst schema = Yup.object().shape({\n  password: Yup.string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('Password is required'),\n});\n\nexport const PasswordForm = ({ setPassword }) => {\n  const formik = useFormik({\n    initialValues: { password: '' },\n    validationSchema: schema,\n    onSubmit: values => {\n      setPassword(values);\n    },\n  });\n\n  return (\n    <>\n      <Box as=\"form\" onSubmit={formik.handleSubmit} width='100%'>\n        <TextField\n          margin=\"normal\"\n          fullWidth\n          required\n          id=\"password\"\n          name=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          error={formik.touched.password && Boolean(formik.errors.password)}\n          helperText={formik.touched.password && formik.errors.password}\n        />\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          sx={{ mt: 3, mb: 2 }}\n        >\n          Send\n        </Button>\n      </Box>\n    </>\n  );\n};\n","import Avatar from '@mui/material/Avatar';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport BoxM from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { Box } from 'components/Box';\nimport { SpinnerLoader } from 'components/SpinnerLoader/SpinnerLoader';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { restorePasswordUser } from 'redux/authApi';\nimport { getAuthIsLoading } from 'redux/selectors';\nimport { notifyError } from 'helpers/notify';\nimport { PasswordForm } from 'components/AuthForns/PasswordForm';\nimport { useNavigate } from 'react-router-dom';\n\nexport const RestorePasswordPage = () => {\n  const navigate = useNavigate();\n  const isLoading = useSelector(getAuthIsLoading);\n  const [password, setPassword] = useState(null);\n  const { token } = useParams();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!token) {\n      return;\n    }\n    if (password) {\n      dispatch(restorePasswordUser({ password, token }))\n        .unwrap()\n        .then(() => navigate('/login'))\n        .catch(error => {\n          notifyError(`${error}`);\n        });\n    }\n    return () => {};\n  }, [dispatch, navigate, password, token]);\n\n  return (\n    <>\n      {!isLoading ? (\n        <>\n          <Container maxWidth=\"xs\">\n            <CssBaseline />\n            <BoxM\n              sx={{\n                marginTop: 8,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n              }}\n            >\n              <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n                <LockOutlinedIcon />\n              </Avatar>\n              <Typography component=\"h1\" variant=\"h5\">\n                Sign in\n              </Typography>\n              <PasswordForm setPassword={setPassword} />\n            </BoxM>\n          </Container>\n        </>\n      ) : (\n        <>\n          <Box\n            as=\"main\"\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            height=\"100vh\"\n          >\n            <SpinnerLoader />\n          </Box>\n        </>\n      )}\n    </>\n  );\n};\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM9 6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9V6zm9 14H6V10h12v10zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z\"\n}), 'LockOutlined');\n\nexports.default = _default;"],"names":["createBox","schema","Yup","shape","password","min","required","PasswordForm","setPassword","formik","useFormik","initialValues","validationSchema","onSubmit","values","as","handleSubmit","width","TextField","margin","fullWidth","id","name","label","type","value","onChange","handleChange","error","touched","Boolean","errors","helperText","Button","variant","sx","mt","mb","RestorePasswordPage","navigate","useNavigate","isLoading","useSelector","getAuthIsLoading","useState","token","useParams","dispatch","useDispatch","useEffect","restorePasswordUser","unwrap","then","catch","notifyError","display","flexDirection","alignItems","justifyContent","height","SpinnerLoader","Container","maxWidth","CssBaseline","Box","marginTop","Avatar","m","bgcolor","LockOutlined","Typography","component","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}