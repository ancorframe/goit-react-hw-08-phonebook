{"version":3,"file":"static/js/808.c113b9e6.chunk.js","mappings":"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","sources":["components/Contacts/AddContactForm.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/Contacts/EditingForm.jsx","components/Contacts/ContactItem.jsx","components/Contacts/ContactList.jsx","components/Contacts/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import React from 'react';\nimport * as Yup from 'yup';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Container from '@mui/material/Container';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport ContactPhoneIcon from '@mui/icons-material/ContactPhone';\nimport Box from '@mui/material/Box';\nimport { nanoid } from 'nanoid';\nimport { useFormik } from 'formik';\nimport { getAllContacts } from 'redux/selectors';\nimport { addContact } from 'redux/contactsApi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { notifyError, notifySuccess, notifyWarning } from 'helpers/notify';\nimport Checkbox from '@mui/material/Checkbox';\nimport FavoriteBorder from '@mui/icons-material/FavoriteBorder';\nimport Favorite from '@mui/icons-material/Favorite';\nimport { FormControlLabel } from '@mui/material';\nimport { useState } from 'react';\n\nconst phoneRegExp =\n  /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(20, 'Too Long!')\n    .required('Required'),\n  email: Yup.string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required'),\n  phone: Yup.string()\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .min(13, 'Too Short!')\n    .max(13, 'Too Long!')\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const nameId = nanoid();\n  const numberId = nanoid();\n  const emailId = nanoid();\n  const favoriteId = nanoid();\n  const contacts = useSelector(getAllContacts);\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(null);\n\n  const initialValues = {\n    name: '',\n    email: '',\n    phone: '',\n    favorite: false,\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema: schema,\n    onSubmit: async values => {\n      setIsLoading(true);\n      if (\n        contacts.find(\n          contact => contact.name.toLowerCase() === values.name.toLowerCase()\n        )\n      ) {\n        return notifyWarning(`${values.name} is already in contacts.`);\n      }\n      try {\n        await dispatch(addContact(values));\n        setIsLoading(false);\n        notifySuccess(`Contact add to contacts book`);\n      } catch (error) {\n        setIsLoading(false);\n        notifyError(`${error}`);\n      }\n    },\n  });\n\n  return (\n    <>\n      <Container maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n            <ContactPhoneIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Add Contact\n          </Typography>\n          <Box as=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 1 }}>\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id={nameId}\n              name=\"name\"\n              label=\"Name\"\n              value={formik.values.name}\n              onChange={formik.handleChange}\n              error={formik.touched.name && Boolean(formik.errors.name)}\n              helperText={formik.touched.name && formik.errors.name}\n              autoComplete=\"off\"\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id={emailId}\n              name=\"email\"\n              label=\"Email\"\n              value={formik.values.email}\n              onChange={formik.handleChange}\n              error={formik.touched.email && Boolean(formik.errors.email)}\n              helperText={formik.touched.email && formik.errors.email}\n              autoComplete=\"off\"\n            />\n            <TextField\n              margin=\"normal\"\n              fullWidth\n              required\n              id={numberId}\n              name=\"phone\"\n              label=\"Phone\"\n              type=\"tel\"\n              value={formik.values.phone}\n              onChange={formik.handleChange}\n              error={formik.touched.phone && Boolean(formik.errors.phone)}\n              helperText={formik.touched.phone && formik.errors.phone}\n              autoComplete=\"off\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  id={favoriteId}\n                  name=\"favorite\"\n                  checked={formik.values.favorite}\n                  onChange={formik.handleChange}\n                  inputProps={{ 'aria-label': 'controlled' }}\n                  icon={<FavoriteBorder />}\n                  checkedIcon={<Favorite />}\n                />\n              }\n              label=\"favorite\"\n            />\n\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              fullWidth\n              type=\"submit\"\n              sx={{ mt: 3, mb: 2 }}\n              disabled={isLoading}\n            >\n              Add contact\n            </Button>\n          </Box>\n        </Box>\n      </Container>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const ModalContainer = styled.div`\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n`;\n","import React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { Overlay, ModalContainer } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ onBackdropClose, children }) => {\n  return ReactDOM.createPortal(\n    <Overlay onClick={e => onBackdropClose(e)}>\n      <ModalContainer>{children}</ModalContainer>\n    </Overlay>,\n    modalRoot\n  );\n};\n\n\nModal.propTypes = {\n  onBackdropClose: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};","import React from 'react';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Container from '@mui/material/Container';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport ModeEditIcon from '@mui/icons-material/ModeEdit';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { nanoid } from 'nanoid';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { updateContactById } from 'redux/contactsApi';\nimport { notifyError, notifySuccess } from 'helpers/notify';\nimport Checkbox from '@mui/material/Checkbox';\nimport FavoriteBorder from '@mui/icons-material/FavoriteBorder';\nimport Favorite from '@mui/icons-material/Favorite';\nimport { FormControlLabel } from '@mui/material';\n\nconst phoneRegExp =\n  /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(20, 'Too Long!')\n    .required('Required'),\n  email: Yup.string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required'),\n  phone: Yup.string()\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .min(13, 'Too Short!')\n    .max(13, 'Too Long!')\n    .required('Required'),\n});\n\nexport const EditingForm = ({ value, close }) => {\n  const { _id: id } = value;\n  const nameId = nanoid();\n  const numberId = nanoid();\n  const emailId = nanoid();\n  const favoriteId = nanoid();\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      name: value.name,\n      email: value.email,\n      phone: value.phone,\n      favorite: value.favorite,\n    },\n    validationSchema: schema,\n    onSubmit: values => {\n      dispatch(updateContactById({ values, id }))\n        .unwrap()\n        .then(() => {\n          notifySuccess(`Contact modified`);\n          close();\n        })\n        .catch(error => notifyError(`${error}`));\n    },\n  });\n\n  return (\n    <>\n      <Container maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            backgroundColor: '#ffffff',\n            padding: '15px',\n            borderRadius: '4px',\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n            <ModeEditIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Edit contact\n          </Typography>\n          <Box as=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 1 }}>\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id={nameId}\n              name=\"name\"\n              label=\"Name\"\n              value={formik.values.name}\n              onChange={formik.handleChange}\n              error={formik.touched.name && Boolean(formik.errors.name)}\n              helperText={formik.touched.name && formik.errors.name}\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id={emailId}\n              name=\"email\"\n              label=\"Email\"\n              value={formik.values.email}\n              onChange={formik.handleChange}\n              error={formik.touched.email && Boolean(formik.errors.email)}\n              helperText={formik.touched.email && formik.errors.email}\n            />\n            <TextField\n              margin=\"normal\"\n              fullWidth\n              required\n              id={numberId}\n              name=\"phone\"\n              label=\"Phone\"\n              type=\"tel\"\n              value={formik.values.phone}\n              onChange={formik.handleChange}\n              error={formik.touched.phone && Boolean(formik.errors.phone)}\n              helperText={formik.touched.phone && formik.errors.phone}\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  id={favoriteId}\n                  name=\"favorite\"\n                  checked={formik.values.favorite}\n                  onChange={formik.handleChange}\n                  inputProps={{ 'aria-label': 'controlled' }}\n                  icon={<FavoriteBorder />}\n                  checkedIcon={<Favorite />}\n                />\n              }\n              label=\"favorite\"\n            />\n\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              fullWidth\n              type=\"submit\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Confirm\n            </Button>\n          </Box>\n        </Box>\n      </Container>\n    </>\n  );\n};\n\nEditingForm.propTypes = {\n  close: PropTypes.func.isRequired,\n  value: PropTypes.object.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Fab from '@mui/material/Fab';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Box } from 'components/Box';\nimport { useEffect, useState } from 'react';\nimport { Modal } from 'components/Modal/Modal';\nimport { EditingForm } from './EditingForm';\nimport { useDispatch } from 'react-redux';\nimport { deleteContactById, updateFavoriteById } from 'redux/contactsApi';\nimport { notifyError, notifySuccess } from 'helpers/notify';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\n\nexport const ContactItem = ({ contact }) => {\n  const [deleteBtn, setDeleteBtn] = useState({\n    isLoading: false,\n    color: 'primary',\n  });\n  const [showModal, setShowModal] = useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (showModal) {\n      window.addEventListener('keydown', onEsc);\n    }\n    return () => {\n      if (showModal) {\n        window.removeEventListener('keydown', onEsc);\n      }\n    };\n  });\n\n  const handleDelete = async e => {\n    setDeleteBtn({ isLoading: true });\n    dispatch(deleteContactById(e.currentTarget.id))\n      .unwrap()\n      .then(() => notifySuccess(`Contact delete`))\n      .catch(error => {\n        setDeleteBtn({ isLoading: false });\n        setDeleteBtn({ color: 'error' });\n        notifyError(`${error}`);\n      });\n  };\n\n  const setFavorite = async e => {\n    const body = { favorite: !contact.favorite };\n    const id = e.currentTarget.id;\n    dispatch(updateFavoriteById({ id, body }))\n      .unwrap()\n      .then(c =>\n        c.update.favorite\n          ? notifySuccess(`Contact add to favorite`)\n          : notifySuccess(`Contact remove from favorite`)\n      )\n      .catch(error => notifyError(`${error}`));\n  };\n\n  const onEsc = e => {\n    if (e.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const onBackdropClose = e => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  const onOpen = () => {\n    setShowModal(true);\n  };\n\n  const onClose = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <Box\n        width=\"396px\"\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        borderRadius=\"15px\"\n        bg=\"#f7f7ff\"\n      >\n        <Box width=\"250px\">\n          <p>Name: {contact.name}</p>\n          <p>Email: {contact.email}</p>\n          <p>Phone: {contact.phone}</p>\n        </Box>\n        <Fab\n          id={contact._id}\n          type=\"button\"\n          aria-label=\"favorite\"\n          size=\"small\"\n          onClick={setFavorite}\n        >\n          {contact.favorite ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n        </Fab>\n        <Fab\n          type=\"button\"\n          color=\"secondary\"\n          aria-label=\"edit\"\n          size=\"small\"\n          onClick={onOpen}\n        >\n          <EditIcon />\n        </Fab>\n        <Fab\n          color={deleteBtn.color}\n          aria-label=\"delete\"\n          type=\"button\"\n          id={contact._id}\n          onClick={handleDelete}\n          disabled={deleteBtn.isLoading}\n          size=\"small\"\n        >\n          <DeleteIcon />\n        </Fab>\n      </Box>\n      {showModal && (\n        <Modal onBackdropClose={onBackdropClose}>\n          <EditingForm value={contact} close={() => onClose()} />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n","import Typography from '@mui/material/Typography';\nimport { ContactItem } from './ContactItem';\nimport {\n  getAllContacts,\n  getFilteredContacts,\n  getIsLoading,\n} from 'redux/selectors';\nimport { Box } from 'components/Box';\nimport { SpinnerLoader } from 'components/SpinnerLoader/SpinnerLoader';\nimport { useSelector } from 'react-redux';\n\nexport const ContactList = () => {\n  const allContacts = useSelector(getAllContacts);\n  const filteredContacts = useSelector(getFilteredContacts);\n  const isLoading = useSelector(getIsLoading);\n\n  if (allContacts.length === 0 && isLoading) {\n    return (\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n        <SpinnerLoader />\n      </Box>\n    );\n  }\n\n  if (allContacts.length === 0) {\n    return (\n      <Typography component=\"h1\" variant=\"h5\" textAlign=\"center\">\n        No contacts (\n      </Typography>\n    );\n  }\n\n  if (filteredContacts.length === 0) {\n    return (\n      <Typography component=\"h1\" variant=\"h5\" textAlign=\"center\">\n        No contacts with this name(\n      </Typography>\n    );\n  }\n  return (\n    <Box\n      as=\"ul\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      gridGap={3}\n    >\n      {filteredContacts.map(item => {\n        return (\n          <li key={item._id}>\n            <ContactItem contact={item} />\n          </li>\n        );\n      })}\n    </Box>\n  );\n};\n","import React from 'react';\nimport Container from '@mui/material/Container';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport PersonSearchIcon from '@mui/icons-material/PersonSearch';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateFilterQuery, updateValue } from 'redux/filterSlice';\nimport { getFilter, getFilterQuery } from 'redux/selectors';\nimport { FormControl, InputLabel, MenuItem, Select } from '@mui/material';\nimport { getContacts } from 'redux/contactsApi';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const filterQuery = useSelector(getFilterQuery);\n\n  const onChange = e => {\n    const value = e.target.value.trim();\n    dispatch(updateValue(value));\n  };\n\n  const onSelectChange = e => {\n    const value = e.target.value === 'all' ? null : e.target.value;\n    dispatch(updateFilterQuery(value));\n    dispatch(getContacts());\n  };\n\n  return (\n    <>\n      <Container maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n            <PersonSearchIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Find contact by name\n          </Typography>\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            name=\"filter\"\n            label=\"Name\"\n            value={filter}\n            onChange={onChange}\n            autoComplete=\"off\"\n          />\n          <FormControl fullWidth>\n            <InputLabel id=\"demo-simple-select-label\">\n              Filter by favorite\n            </InputLabel>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              value={filterQuery === null ? 'all' : filterQuery}\n              label=\"Filter by favorite\"\n              onChange={onSelectChange}\n            >\n              <MenuItem value={'all'}>All</MenuItem>\n              <MenuItem value={'true'}>All favorite</MenuItem>\n              <MenuItem value={'false'}>All not fovorite</MenuItem>\n            </Select>\n          </FormControl>\n        </Box>\n      </Container>\n    </>\n  );\n};\n","import { Box } from 'components/Box';\nimport { ContactForm } from 'components/Contacts/AddContactForm';\nimport { ContactList } from 'components/Contacts/ContactList';\nimport { Filter } from 'components/Contacts/Filter';\nimport { notifyError } from 'helpers/notify';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contactsApi';\n\nexport const ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const contoller = new AbortController();\n    (async () => {\n      try {\n        await dispatch(getContacts(contoller.signal)).unwrap()\n      } catch (error) {\n        notifyError(`${error}`);\n      }\n    })();\n    return () => contoller.abort();\n  }, [dispatch]);\n\n  return (\n    <Box\n      as=\"main\"\n      display=\"grid\"\n      gridTemplateColumns=\"repeat(2, 1fr)\"\n      gridGap={6}\n    >\n      <ContactForm />\n      <Box gridArea=\"1 / 2 / 2 / 3\">\n        <Filter />\n        <ContactList />\n      </Box>\n    </Box>\n  );\n};\n"],"names":["schema","Yup","shape","name","min","max","required","email","phone","matches","ContactForm","nameId","nanoid","numberId","emailId","favoriteId","contacts","useSelector","getAllContacts","dispatch","useDispatch","useState","isLoading","setIsLoading","formik","useFormik","initialValues","favorite","validationSchema","onSubmit","values","find","contact","toLowerCase","notifyWarning","addContact","notifySuccess","notifyError","Container","maxWidth","CssBaseline","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","ContactPhone","Typography","component","variant","as","handleSubmit","mt","TextField","margin","fullWidth","id","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","autoComplete","type","FormControlLabel","control","Checkbox","checked","inputProps","icon","FavoriteBorder","checkedIcon","Favorite","Button","color","mb","disabled","Overlay","styled","ModalContainer","modalRoot","document","querySelector","Modal","onBackdropClose","children","ReactDOM","onClick","e","EditingForm","close","_id","updateContactById","unwrap","then","catch","backgroundColor","padding","borderRadius","ModeEdit","ContactItem","deleteBtn","setDeleteBtn","showModal","setShowModal","useEffect","window","addEventListener","onEsc","removeEventListener","handleDelete","deleteContactById","currentTarget","setFavorite","body","updateFavoriteById","c","update","code","onClose","Box","width","justifyContent","bg","Fab","size","Edit","Delete","target","ContactList","allContacts","filteredContacts","getFilteredContacts","getIsLoading","length","SpinnerLoader","textAlign","gridGap","map","item","Filter","filter","getFilter","filterQuery","getFilterQuery","PersonSearch","trim","updateValue","FormControl","InputLabel","Select","labelId","updateFilterQuery","getContacts","MenuItem","ContactsPage","contoller","AbortController","signal","abort","gridTemplateColumns","gridArea"],"sourceRoot":""}